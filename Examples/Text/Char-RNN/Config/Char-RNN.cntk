# Parameters can be overwritten on the command line
# for example: cntk configFile=myConfigFile RootDir=../.. 
# For running from Visual Studio add
# currentDirectory=$(SolutionDir)/<path to corresponding data folder> 
RootDir = ".."

ConfigDir = "$RootDir$/Config"
DataDir = "$RootDir$/Data"
OutputDir = "$RootDir$/Output"
ModelDir = "$OutputDir$/Models"

# deviceId=-1 for CPU, >=0 for GPU devices, "auto" chooses the best GPU, or CPU if no usable GPU is available
deviceId = auto

command = Char_RNN_Train:Char_RNN_Test

precision = "float"
traceLevel = 1
modelPath = "$ModelDir$/Char-RNN.dnn"
outputNodeNames = ScaledLogLikelihood

#######################################
#  TRAINING CONFIG                    #
#######################################

Char_RNN_Train = [
    action = "train"

    # Notation xxx:yyy*n:zzz is equivalent to xxx, then yyy repeated n times, then zzz
    # Example: 10:20*3:5 is equivalent to 10:20:20:20:5
    SimpleNetworkBuilder = [
        # 100 input, 2 200-element hidden, 100 output
        layerSizes = 100:200*2:100
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        initValueScale = 1.0
        applyMeanVarNorm = true
        uniformInit = true
        needPrior = true
    ]

    SGD = [
	    # epochSize = 0 means epochSize is the size of the training set 
        epochSize = 0 
        minibatchSize = 1024	
        learningRatesPerMB = 0.5*2:0.2*15:0.1
        momentumPerMB = 0.9
        dropoutRate = 0.5
        maxEpochs = 20
    ]
       
    # Parameter values for the reader
    reader = [
        readerType = "UCIFastReader"
        file = "$DataDir$/TinyShakespeare1Hot.txt"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 1  

        features = [
            dim = 100        # 100-dimensional input data
            start = 1      # Start with first element on line
        ]

        labels = [
            start = 0      # Skip two elements
            dim = 1        # One label dimension
            labelDim = 100   # Two labels possible
            labelMappingFile = "$DataDir$/ASCII1HotMapping.txt"
        ]
    ]
]

########################################
#  TEST RESULTS                        #
#  (computes prediction error and      #
#   perplexity on a test set and       #
#   writes the output to the console.) #
########################################

Char_RNN_Test = [
    action = "test"

    # Parameter values for the reader
    reader = [
        readerType = "UCIFastReader"
        file = "$DataDir$/TinyShakespeare1HotTest.txt"
        randomize = "none"
	  
        features = [
            dim = 100
            start = 0
        ]
	  
        labels = [
            start = 0
            dim = 1
            labelDim = 100
            labelMappingFile = "$DataDir$/ASCII1HotMapping.txt"
        ]
    ]
]

########################################
#  OUTPUT RESULTS                      #
#
#  (generate synthetic output from the trained model)
#
########################################

Simple_Demo_Output=[
    action = "write"

    # Parameter values for the reader
    reader = [
        readerType = "UCIFastReader"
        file = "$DataDir$/TinyShakespeare1HotTest.txt"
        randomize = "none"
	  
        features = [
            dim = 100
            start = 0
        ]
	  
        labels = [
            start = 0
            dim = 1
            labelDim = 100
            labelMappingFile = "$DataDir$/ASCII1HotMapping.txt"
        ]
    ]
	
    outputPath = "$OutputDir$/TinyShakespeare-out.txt"    # Dump output as text